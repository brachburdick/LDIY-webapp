"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnttecUSBDMXProDriver = void 0;
const abstract_serial_driver_1 = require("./abstract-serial-driver");
const ENTTEC_PRO_DMX_STARTCODE = 0x00;
const ENTTEC_PRO_START_OF_MSG = 0x7e;
const ENTTEC_PRO_END_OF_MSG = 0xe7;
const ENTTEC_PRO_SEND_DMX_RQ = 0x06;
class EnttecUSBDMXProDriver extends abstract_serial_driver_1.AbstractSerialDriver {
    constructor(serialPort, options = {}) {
        super(serialPort, {
            serialPortOptions: {
                'baudRate': 250000,
                'dataBits': 8,
                'stopBits': 2,
                'parity': 'none',
            },
            sendInterval: 1000 / (options.dmxSpeed || 40),
        });
        console.log('EUDP; CONSTRUCTOR; serialPort then Options');
        console.log(serialPort);
        console.log(options);
        console.log('super.serialPort');
        console.log(super.serialPort);
        this._readyToWrite = true;
    }
    sendUniverse() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            console.log('EUDM; sendUniverse(); commence. this, this.serialport');
            console.log(this);
            console.log(this === null || this === void 0 ? void 0 : this.serialPort);
            if (!((_a = this.serialPort) === null || _a === void 0 ? void 0 : _a.writable)) {
                console.log('EUDM; sendUniverse(); serialPort is not writable');
                return;
            }
            console.log('EUDM; sendUniverse(); this.serialPort.writable == true');
            if (this === null || this === void 0 ? void 0 : this._readyToWrite) {
                console.log('EUDM; sendUniverse(); this._readyToWrite == true;init Buffer.from() & concat()');
                const hdr = Buffer.from([
                    ENTTEC_PRO_START_OF_MSG,
                    ENTTEC_PRO_SEND_DMX_RQ,
                    (this.universeBuffer.length) & 0xff,
                    ((this.universeBuffer.length) >> 8) & 0xff,
                    ENTTEC_PRO_DMX_STARTCODE,
                ]);
                const msg = Buffer.concat([
                    hdr,
                    this.universeBuffer.slice(1),
                    Buffer.from([ENTTEC_PRO_END_OF_MSG]),
                ]);
                console.log('EUDM; sendUniverse(); msg = ');
                console.log(msg);
                this._readyToWrite = false;
                // Use the WritableStream to write the data
                const writer = this.serialPort.writable.getWriter();
                try {
                    yield writer.write(msg);
                    this._readyToWrite = true;
                }
                catch (error) {
                    console.error('EUDM; sendUniverse(); Error writing to serial port:', error);
                }
                finally {
                    writer.releaseLock();
                }
            }
        });
    }
    ;
}
exports.EnttecUSBDMXProDriver = EnttecUSBDMXProDriver;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50dGVjLXVzYi1kbXgtcHJvLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2RyaXZlcnMvZW50dGVjLXVzYi1kbXgtcHJvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLHFFQUE4RDtBQUU5RCxNQUFNLHdCQUF3QixHQUFHLElBQUksQ0FBQztBQUN0QyxNQUFNLHVCQUF1QixHQUFHLElBQUksQ0FBQztBQUNyQyxNQUFNLHFCQUFxQixHQUFHLElBQUksQ0FBQztBQUNuQyxNQUFNLHNCQUFzQixHQUFHLElBQUksQ0FBQztBQVFwQyxNQUFhLHFCQUFzQixTQUFRLDZDQUFvQjtJQUc3RCxZQUFZLFVBQWUsRUFBRSxVQUErQixFQUFFO1FBQzVELEtBQUssQ0FBQyxVQUFVLEVBQUU7WUFDaEIsaUJBQWlCLEVBQUU7Z0JBQ2pCLFVBQVUsRUFBRSxNQUFNO2dCQUNsQixVQUFVLEVBQUUsQ0FBQztnQkFDYixVQUFVLEVBQUUsQ0FBQztnQkFDYixRQUFRLEVBQUUsTUFBTTthQUNqQjtZQUNELFlBQVksRUFBRSxJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsUUFBUSxJQUFJLEVBQUUsQ0FBQztTQUM5QyxDQUFDLENBQUM7UUFDSCxPQUFPLENBQUMsR0FBRyxDQUFDLDRDQUE0QyxDQUFDLENBQUM7UUFDMUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN4QixPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3JCLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUNoQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUU5QixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztJQUM1QixDQUFDO0lBRUssWUFBWTs7O1lBQ2hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsdURBQXVELENBQUMsQ0FBQztZQUNyRSxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxhQUFKLElBQUksdUJBQUosSUFBSSxDQUFFLFVBQVUsQ0FBQyxDQUFDO1lBRTlCLElBQUksQ0FBQyxDQUFBLE1BQUEsSUFBSSxDQUFDLFVBQVUsMENBQUUsUUFBUSxDQUFBLEVBQUU7Z0JBQzlCLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0RBQWtELENBQUMsQ0FBQztnQkFDaEUsT0FBTzthQUNSO1lBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyx3REFBd0QsQ0FBQyxDQUFDO1lBRXRFLElBQUksSUFBSSxhQUFKLElBQUksdUJBQUosSUFBSSxDQUFFLGFBQWEsRUFBRTtnQkFDdkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnRkFBZ0YsQ0FBQyxDQUFDO2dCQUU5RixNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDO29CQUN0Qix1QkFBdUI7b0JBQ3ZCLHNCQUFzQjtvQkFDdEIsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUk7b0JBQ25DLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUk7b0JBQzFDLHdCQUF3QjtpQkFDekIsQ0FBQyxDQUFDO2dCQUNILE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7b0JBQ3hCLEdBQUc7b0JBQ0gsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO29CQUM1QixNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQztpQkFDckMsQ0FBQyxDQUFDO2dCQUVILE9BQU8sQ0FBQyxHQUFHLENBQUMsOEJBQThCLENBQUMsQ0FBQztnQkFDNUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFFakIsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7Z0JBRTNCLDJDQUEyQztnQkFDM0MsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFLENBQUM7Z0JBRXBELElBQUk7b0JBQ0YsTUFBTSxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO29CQUN4QixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztpQkFDM0I7Z0JBQUMsT0FBTyxLQUFLLEVBQUU7b0JBQ2QsT0FBTyxDQUFDLEtBQUssQ0FBQyxxREFBcUQsRUFBRSxLQUFLLENBQUMsQ0FBQztpQkFDN0U7d0JBQVM7b0JBQ1IsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDO2lCQUN0QjthQUNGOztLQUNGO0lBQUEsQ0FBQztDQUNIO0FBbkVELHNEQW1FQyJ9